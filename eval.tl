(define caar (lambda (x) (car (car x))))
(define cadr (lambda (x) (car (cdr x))))
(define cadar (lambda (x) (cadr (car x))))
(define caddr (lambda (x) (cadr (cdr x))))
(define caddar (lambda (x) (caddr (car x))))

(define not (lambda (x) (if x False True)))

(define append (lambda (x y)
		 (if (null? x) y (cons (car x) (append (cdr x) y)))))

(define pair (lambda (x y) (cons x (cons y '() ))))

(define pairlis 
    (lambda (x y)
      (if (null? x)
	  '()
	  (cons (pair (car x) (car y)) (pairlis (cdr x) (cdr y))))))

(define assoc (lambda (x y)
		(if (eq? (caar y) x) (cadar y) (assoc x (cdr y)))))

(define eval 
    (lambda (e a)
      (cond
	((atom? e) (assoc e a))
	((atom? (car e))
	 (cond
	   ((eq? (car e) (q car))   (car (eval (cadr e) a)))
	   ((eq? (car e) (q cdr))   (cdr (eval (cadr e) a)))
	   ((eq? (car e) (q cons))  (cons (eval (cadr e) a) (eval (caddr e) a)))
	   ((eq? (car e) (q atom?)) (atom? (eval (cadr e) a)))
	   ((eq? (car e) (q eq?))   (eq? (eval (cadr e) a) (eval (caddr e) a)))
	   ((eq? (car e) (q quote)) (cadr e))
	   ((eq? (car e) (q q))     (cadr e))
	   ((eq? (car e) (q cond))  (evcon (cdr e) a))
	   (True                   (eval (cons (assoc (car e) a) (cdr e)) a))))
	((eq? (caar e) (q lambda))
	 (eval (caddar e) (append (pairlis (cadar e) (evlis (cdr e) a)) a))))))

(define evcon 
    (lambda (c a)
      (cond ((eval (caar c) a) (eval (cadar c) a))
	    (True              (evcon (cdr c) a)))))

(define evlis 
    (lambda (m a)
      (cond ((null? m) (q ()))
	    (True     (cons (eval (car m) a) (evlis (cdr m) a))))))


(define assert-equal (lambda (x y) (print (= x y))))

(define assert-not-equal (lambda (x y) (print (not (= x y)))))

(assert-equal (eval 'x '((x test-value)))
	      'test-value)
(assert-equal (eval 'y '((y (1 2 3))))
	      '(1 2 3))
(assert-not-equal (eval 'z '((z ((1) 2 3))))
		  '(1 2 3))
(assert-equal (eval '(quote 7) '())
	      '7)
(assert-equal (eval '(atom? '(1 2)) '())
	      False)
(assert-equal (eval '(eq? 1 1) '((1 1)))
	      True)
(assert-equal (eval '(eq? 1 2) '((1 1) (2 2)))
	      False)
(assert-equal (eval '(eq? 1 1) '((1 1)))
	      True)
(assert-equal (eval '(car '(3 2)) '())
	      '3)
(assert-equal (eval '(cdr '(1 2 3)) '())
	      '(2 3))
(assert-not-equal (eval '(cdr '(1 (2 3) 4)) '())
		  '(2 3 4))
(assert-equal (eval '(cons 1 '(2 3)) '((1 1)(2 2)(3 3)))
	      '(1 2 3))
(assert-equal (eval '(cond ((atom? x) 'x-atomic) 
			     ((atom? y) 'y-atomic) 
			     ('True 'nonatomic))
		    '((x 1)(y (3 4))))
	      'x-atomic)
(assert-equal (eval '(cond ((atom? x) 'x-atomic) 
			     ((atom? y) 'y-atomic) 
			     ('True 'nonatomic))
		    '((x (1 2))(y 3)))
	      'y-atomic)
(assert-equal (eval '(cond ((atom? x) 'x-atomic) 
			     ((atom? y) 'y-atomic) 
			     ('True 'nonatomic)) 
		    '((x (1 2))(y (3 4))))
	      'nonatomic)
(assert-equal (eval '((lambda (x) (car (cdr x))) '(1 2 3 4)) '())
	      2)